version: '2.4'

services:
  gateway:
    build:
      network: bridge-net
      context: $PWD/gateway
      args:
        BASE_IMAGE: ${GOHAN_GATEWAY_BASE_IMAGE}
        BASE_IMAGE_VERSION: ${GOHAN_GATEWAY_BASE_IMAGE_VERSION}
        DRS_BASIC_AUTH_FILE_PATH: ${GOHAN_DRS_BASIC_AUTH_FILE_PATH}
    image: ${GOHAN_GATEWAY_IMAGE}:${GOHAN_GATEWAY_VERSION}
    container_name: ${GOHAN_GATEWAY_CONTAINER_NAME}
    networks: 
      - bridge-net
    ports:
      - "80:80"
      - "443:443"

  # DUPLICATES - almost
  # api:
  #   build:
  #     context: $PWD/Gohan.Api
  #     args:
  #       BASE_IMAGE: ${GOHAN_API_BASE_IMAGE}
  #       SRC_DIR: ${GOHAN_API_SRC_DIR}
  #       INTERNAL_PORT: ${GOHAN_API_INTERNAL_PORT}
  #   image: ${GOHAN_API_IMAGE}:${GOHAN_API_VERSION}
  #   container_name: ${GOHAN_API_CONTAINER_NAME}
  #   networks:
  #     - bridge-net
  #   environment:
  #     # Elasticsearch
  #     - ElasticSearch__Username=${GOHAN_ES_USERNAME}
  #     - ElasticSearch__Password=${GOHAN_ES_PASSWORD}

  #     - ElasticSearch__GatewayPath=${GOHAN_ES_GATEWAY_PATH}

  #     - ElasticSearch__PrimaryIndex=${GOHAN_API_ES_PI}
  #     - ElasticSearch__Protocol=${GOHAN_API_ES_PROTO}
  #     - ElasticSearch__Host=${GOHAN_API_ES_HOST}
  #     - ElasticSearch__Port=${GOHAN_API_ES_PORT}


  #     # AuthX
  #     - Authorization__IsEnabled=${GOHAN_API_AUTHZ_ENABLED}
  #     - Authorization__AgreedToDisabledAuthzRiskTerms=${GOHAN_API_AUTHZ_AGREED_DISABLED_RISK}
  #     - Authorization__OpaUrl=${GOHAN_PRIVATE_AUTHZ_URL}
  #     - Authorization__RequiredHeadersCommaSep=${GOHAN_API_AUTHZ_REQHEADS}

  #     - Authentication__OidcPublicJwksUrl=${GOHAN_PUBLIC_AUTHN_JWKS_URL}
      

  #     # .NET
  #     - DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1 # optimized alpine linux container needs this
  #     - DOTNET_CLI_TELEMETRY_OPTOUT=1

  # DUPLICATES - almost
  api-alpine:
    build:
      context: $PWD/Gohan.Api
      args:
        BASE_IMAGE: ${GOHAN_API_ALPINE_BASE_IMAGE}
        SRC_DIR: ${GOHAN_API_ALPINE_SRC_DIR}
        INTERNAL_PORT: ${GOHAN_API_INTERNAL_PORT}
        IS_ALPINE: "true"
    image: ${GOHAN_API_IMAGE}:${GOHAN_API_VERSION}
    container_name: ${GOHAN_API_CONTAINER_NAME}
    networks:
      - bridge-net
    environment:
      # Elasticsearch
      - ElasticSearch__Username=${GOHAN_ES_USERNAME}
      - ElasticSearch__Password=${GOHAN_ES_PASSWORD}

      - ElasticSearch__GatewayPath=${GOHAN_ES_GATEWAY_PATH}

      - ElasticSearch__PrimaryIndex=${GOHAN_API_ES_PI}
      - ElasticSearch__Protocol=${GOHAN_API_ES_PROTO}
      - ElasticSearch__Host=${GOHAN_API_ES_HOST}
      - ElasticSearch__Port=${GOHAN_API_ES_PORT}


      # AuthX
      - Authorization__IsEnabled=${GOHAN_API_AUTHZ_ENABLED}
      - Authorization__AgreedToDisabledAuthzRiskTerms=${GOHAN_API_AUTHZ_AGREED_DISABLED_RISK}
      - Authorization__OpaUrl=${GOHAN_PRIVATE_AUTHZ_URL}
      - Authorization__RequiredHeadersCommaSep=${GOHAN_API_AUTHZ_REQHEADS}

      - Authentication__OidcPublicJwksUrl=${GOHAN_PUBLIC_AUTHN_JWKS_URL}
      

      # .NET
      - DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1 # optimized alpine linux container needs this
      - DOTNET_CLI_TELEMETRY_OPTOUT=1
  ####

  elasticsearch:
    image: ${GOHAN_ES_BASE_IMAGE}:${GOHAN_ES_BASE_VERSION}
    mem_limit: ${GOHAN_ES_MEM_LIM} # for mem_limit to work, make sure docker-compose is v2.4
    cpuset: ${GOHAN_ES_CPUSET} # grant access to all cores
    container_name: ${GOHAN_ES_CONTAINER_NAME}
      
    networks: 
      - bridge-net
    environment:
      - ELASTIC_USERNAME=${GOHAN_ES_USERNAME}
      - ELASTIC_PASSWORD=${GOHAN_ES_PASSWORD}
      - ${GOHAN_ES_JAVA_OPTS}
      - xpack.security.enabled=true
      - discovery.type=${GOHAN_ES_DISC_TYP}
    volumes: 
      - ${GOHAN_ES_DATA_DIR}:/usr/share/elasticsearch/data

  kibana:
    image: ${GOHAN_KB_BASE_IMAGE}:${GOHAN_KB_BASE_VERSION}
    container_name: ${GOHAN_KB_CONTAINER_NAME}
    networks: 
      - bridge-net
    environment:
      - ELASTICSEARCH_URL=${GOHAN_KB_ES_HOST}:${GOHAN_KB_ES_PORT}

  drs:
    build:
      context: $PWD/drs
      args:
        BASE_IMAGE: ${GOHAN_DRS_BASE_IMAGE}
        BASE_IMAGE_VERSION: ${GOHAN_DRS_BASE_IMAGE_VERSION}
        REPO: ${GOHAN_DRS_REPO}
        BRANCH: ${GOHAN_DRS_BRANCH}
        TAG: ${GOHAN_DRS_TAG}
    image: ${GOHAN_DRS_IMAGE}:${GOHAN_DRS_VERSION}
    container_name: ${GOHAN_DRS_CONTAINER_NAME}
    environment: 
      # Runtime
      - FLASK_DEBUG=False
      - FLASK_APP=app
      - DATABASE=/drs/chord_drs/data/db/  # slightly confused naming, folder for database to go in
      - DATA=/drs/chord_drs/data/obj/  # DRS file objects, vs. the database
    networks: 
      - bridge-net
    volumes:
      - ${GOHAN_DRS_DATA_DIR}:/drs/chord_drs/data


  authorization:
    build:
      context: $PWD/authorization
      args: 
        - BASE_IMAGE=${GOHAN_AUTHZ_OPA_BASE_IMAGE}:${GOHAN_AUTHZ_OPA_BASE_IMAGE_VERSION}
    image: ${GOHAN_AUTHZ_OPA_IMAGE}:${GOHAN_AUTHZ_OPA_IMAGE_VERSION}
    container_name: ${GOHAN_AUTHZ_OPA_CONTAINER_NAME}
    networks:
      - bridge-net
    expose:
      - "${GOHAN_AUTHZ_OPA_INTERNAL_PORT}"
    command:
      - "run"
      - "--server"
      - "--log-level=debug"
      - "/api.policy.rego"


networks: 
  bridge-net:
      external: true