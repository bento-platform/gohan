# Use the Docker embedded DNS server
resolver 127.0.0.11 ipv6=off;

log_format compression '$remote_addr - $remote_user [$time_local] '
                        '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent" "$gzip_ratio" "$uri"';

# Redirect all http to https
server {
    listen 80 default_server;
    listen [::]:80 default_server;

    server_name _; # Redirect http no matter the domain name

    # Security --
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    # --
    
    return 301 https://$host$request_uri;
}


# Gohan API
server {
    listen 443 ssl;

    server_name gohan.local; # TODO: make server_name an environment var

    ssl_certificate /etc/ssl/nginx/gohan_fullchain1.crt;
    ssl_certificate_key /etc/ssl/nginx/gohan_privkey1.key;

    # Security --
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    # --

    client_max_body_size 100M;

    # API
    location / {

        proxy_pass_header    Server;
        proxy_set_header     Upgrade           $http_upgrade;
        proxy_set_header     Connection        "upgrade";
        proxy_set_header     Host              $http_host;
        proxy_set_header     X-Real-IP         $remote_addr;
        proxy_set_header     X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header     X-Forwarded-Proto $http_x_forwarded_proto;

        set $request_url $request_uri;
        set $url $uri;


        set $upstream_api http://gohan-api:5000;

        proxy_pass    $upstream_api;
        error_log /var/log/gohan_api_errors.log;
    }
}


# Gohan Elasticsearch
server {
    listen 443 ssl;

    server_name elasticsearch.gohan.local; # TODO: make server_name an environment var

    ssl_certificate /etc/ssl/nginx/es_gohan_fullchain1.crt;
    ssl_certificate_key /etc/ssl/nginx/es_gohan_privkey1.key;

    # Security --
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    # --

    # ES
    location ~ / { 
            
        proxy_http_version   1.1;

        proxy_pass_header    Server;
        proxy_set_header     Upgrade           $http_upgrade;
        proxy_set_header     Connection        "upgrade";
        proxy_set_header     Host              $http_host;
        proxy_set_header     X-Real-IP         $remote_addr;
        proxy_set_header     X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header     X-Forwarded-Proto $http_x_forwarded_proto;

        # Forward request to the primary elasticsearch node
        set $upstream_es http://es01:9200;
        proxy_pass    $upstream_es; 

        # Errors
        error_log /var/log/elasticsearch_errors.log;


        client_body_timeout  660s;
        proxy_read_timeout   660s;
        proxy_send_timeout   660s;
        send_timeout         660s;

        client_max_body_size 200m;
    }
}


# Gohan Kibana
server {
    listen 443 ssl;

    server_name kibana.gohan.local; # TODO: make server_name an environment var

    ssl_certificate /etc/ssl/nginx/gohan_fullchain1.crt;
    ssl_certificate_key /etc/ssl/nginx/gohan_privkey1.key;

    # Security --
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    # --


    # Kibana
    location ~ / { 
  
        proxy_buffering off;

        # Forward request to the kibana
        set $upstream_kb http://kibana:5601;
        proxy_pass    $upstream_kb; 

        # Errors
        error_log /var/log/kibana_errors.log;


        client_body_timeout  660s;
        proxy_read_timeout   660s;
        proxy_send_timeout   660s;
        send_timeout         660s;

        client_max_body_size 200m;
    }
}

# Gohan DRS
server {
    listen 443 ssl;

    server_name drs.gohan.local; # TODO: make server_name an environment var

    ssl_certificate /etc/ssl/nginx/gohan_fullchain1.crt;
    ssl_certificate_key /etc/ssl/nginx/gohan_privkey1.key;

    # Security --
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    # --

    # DRS
    location ~ / { 
        
        # Basic Auth
        auth_basic "Administrator's Area";
        # TODO: parameterize path with $DRS_BASIC_AUTH_FILE_PATH
        auth_basic_user_file /etc/apache2/drs.htpasswd;

            
        proxy_http_version   1.1;

        proxy_pass_header    Server;
        proxy_set_header     Upgrade           $http_upgrade;
        proxy_set_header     Connection        "upgrade";
        proxy_set_header     Host              $http_host;
        proxy_set_header     X-Real-IP         $remote_addr;
        proxy_set_header     X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header     X-Forwarded-Proto $http_x_forwarded_proto;

        # Forward request to drs
        set $upstream_drs http://gohan-drs:5000;
        proxy_pass    $upstream_drs; 

        # Errors
        error_log /var/log/drs_errors.log;


        client_body_timeout  660s;
        proxy_read_timeout   660s;
        proxy_send_timeout   660s;
        send_timeout         660s;

        client_max_body_size 200m;
    }
}